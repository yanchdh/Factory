// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: classicddz.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "classicddz.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* msg_request_classicddz_start_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_request_classicddz_start_reflection_ = NULL;
const ::google::protobuf::Descriptor* classicddz_player_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  classicddz_player_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* classicddz_dizhu_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  classicddz_dizhu_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_response_classicddz_start_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_response_classicddz_start_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_request_classicddz_call_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_request_classicddz_call_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_response_classicddz_call_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_response_classicddz_call_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_response_classicddz_start_discard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_response_classicddz_start_discard_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_request_classicddz_discard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_request_classicddz_discard_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_response_classicddz_discard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_response_classicddz_discard_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_response_classicddz_end_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_response_classicddz_end_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* e_classic_doudizhu_card_type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* e_classicddz_msgid_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_classicddz_2eproto() {
  protobuf_AddDesc_classicddz_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "classicddz.proto");
  GOOGLE_CHECK(file != NULL);
  msg_request_classicddz_start_descriptor_ = file->message_type(0);
  static const int msg_request_classicddz_start_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_request_classicddz_start, uid_),
  };
  msg_request_classicddz_start_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_request_classicddz_start_descriptor_,
      msg_request_classicddz_start::default_instance_,
      msg_request_classicddz_start_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_request_classicddz_start, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_request_classicddz_start, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_request_classicddz_start));
  classicddz_player_info_descriptor_ = file->message_type(1);
  static const int classicddz_player_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(classicddz_player_info, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(classicddz_player_info, seat_),
  };
  classicddz_player_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      classicddz_player_info_descriptor_,
      classicddz_player_info::default_instance_,
      classicddz_player_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(classicddz_player_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(classicddz_player_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(classicddz_player_info));
  classicddz_dizhu_info_descriptor_ = file->message_type(2);
  static const int classicddz_dizhu_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(classicddz_dizhu_info, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(classicddz_dizhu_info, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(classicddz_dizhu_info, cardid_),
  };
  classicddz_dizhu_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      classicddz_dizhu_info_descriptor_,
      classicddz_dizhu_info::default_instance_,
      classicddz_dizhu_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(classicddz_dizhu_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(classicddz_dizhu_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(classicddz_dizhu_info));
  msg_response_classicddz_start_descriptor_ = file->message_type(3);
  static const int msg_response_classicddz_start_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_response_classicddz_start, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_response_classicddz_start, playerinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_response_classicddz_start, dizhuinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_response_classicddz_start, data_),
  };
  msg_response_classicddz_start_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_response_classicddz_start_descriptor_,
      msg_response_classicddz_start::default_instance_,
      msg_response_classicddz_start_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_response_classicddz_start, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_response_classicddz_start, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_response_classicddz_start));
  msg_request_classicddz_call_descriptor_ = file->message_type(4);
  static const int msg_request_classicddz_call_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_request_classicddz_call, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_request_classicddz_call, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_request_classicddz_call, score_),
  };
  msg_request_classicddz_call_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_request_classicddz_call_descriptor_,
      msg_request_classicddz_call::default_instance_,
      msg_request_classicddz_call_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_request_classicddz_call, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_request_classicddz_call, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_request_classicddz_call));
  msg_response_classicddz_call_descriptor_ = file->message_type(5);
  static const int msg_response_classicddz_call_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_response_classicddz_call, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_response_classicddz_call, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_response_classicddz_call, callseat_),
  };
  msg_response_classicddz_call_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_response_classicddz_call_descriptor_,
      msg_response_classicddz_call::default_instance_,
      msg_response_classicddz_call_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_response_classicddz_call, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_response_classicddz_call, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_response_classicddz_call));
  msg_response_classicddz_start_discard_descriptor_ = file->message_type(6);
  static const int msg_response_classicddz_start_discard_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_response_classicddz_start_discard, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_response_classicddz_start_discard, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_response_classicddz_start_discard, data_),
  };
  msg_response_classicddz_start_discard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_response_classicddz_start_discard_descriptor_,
      msg_response_classicddz_start_discard::default_instance_,
      msg_response_classicddz_start_discard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_response_classicddz_start_discard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_response_classicddz_start_discard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_response_classicddz_start_discard));
  msg_request_classicddz_discard_descriptor_ = file->message_type(7);
  static const int msg_request_classicddz_discard_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_request_classicddz_discard, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_request_classicddz_discard, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_request_classicddz_discard, cardinfo_),
  };
  msg_request_classicddz_discard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_request_classicddz_discard_descriptor_,
      msg_request_classicddz_discard::default_instance_,
      msg_request_classicddz_discard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_request_classicddz_discard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_request_classicddz_discard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_request_classicddz_discard));
  msg_response_classicddz_discard_descriptor_ = file->message_type(8);
  static const int msg_response_classicddz_discard_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_response_classicddz_discard, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_response_classicddz_discard, cardinfo_),
  };
  msg_response_classicddz_discard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_response_classicddz_discard_descriptor_,
      msg_response_classicddz_discard::default_instance_,
      msg_response_classicddz_discard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_response_classicddz_discard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_response_classicddz_discard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_response_classicddz_discard));
  msg_response_classicddz_end_descriptor_ = file->message_type(9);
  static const int msg_response_classicddz_end_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_response_classicddz_end, isdizhuwin_),
  };
  msg_response_classicddz_end_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_response_classicddz_end_descriptor_,
      msg_response_classicddz_end::default_instance_,
      msg_response_classicddz_end_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_response_classicddz_end, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_response_classicddz_end, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_response_classicddz_end));
  e_classic_doudizhu_card_type_descriptor_ = file->enum_type(0);
  e_classicddz_msgid_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_classicddz_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_request_classicddz_start_descriptor_, &msg_request_classicddz_start::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    classicddz_player_info_descriptor_, &classicddz_player_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    classicddz_dizhu_info_descriptor_, &classicddz_dizhu_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_response_classicddz_start_descriptor_, &msg_response_classicddz_start::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_request_classicddz_call_descriptor_, &msg_request_classicddz_call::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_response_classicddz_call_descriptor_, &msg_response_classicddz_call::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_response_classicddz_start_discard_descriptor_, &msg_response_classicddz_start_discard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_request_classicddz_discard_descriptor_, &msg_request_classicddz_discard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_response_classicddz_discard_descriptor_, &msg_response_classicddz_discard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_response_classicddz_end_descriptor_, &msg_response_classicddz_end::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_classicddz_2eproto() {
  delete msg_request_classicddz_start::default_instance_;
  delete msg_request_classicddz_start_reflection_;
  delete classicddz_player_info::default_instance_;
  delete classicddz_player_info_reflection_;
  delete classicddz_dizhu_info::default_instance_;
  delete classicddz_dizhu_info_reflection_;
  delete msg_response_classicddz_start::default_instance_;
  delete msg_response_classicddz_start_reflection_;
  delete msg_request_classicddz_call::default_instance_;
  delete msg_request_classicddz_call_reflection_;
  delete msg_response_classicddz_call::default_instance_;
  delete msg_response_classicddz_call_reflection_;
  delete msg_response_classicddz_start_discard::default_instance_;
  delete msg_response_classicddz_start_discard_reflection_;
  delete msg_request_classicddz_discard::default_instance_;
  delete msg_request_classicddz_discard_reflection_;
  delete msg_response_classicddz_discard::default_instance_;
  delete msg_response_classicddz_discard_reflection_;
  delete msg_response_classicddz_end::default_instance_;
  delete msg_response_classicddz_end_reflection_;
}

void protobuf_AddDesc_classicddz_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_poker_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020classicddz.proto\032\013poker.proto\"+\n\034msg_r"
    "equest_classicddz_start\022\013\n\003uid\030\001 \002(\003\"3\n\026"
    "classicddz_player_info\022\013\n\003uid\030\001 \002(\003\022\014\n\004s"
    "eat\030\002 \002(\005\"B\n\025classicddz_dizhu_info\022\014\n\004se"
    "at\030\001 \002(\005\022\013\n\003pos\030\002 \002(\005\022\016\n\006cardId\030\003 \002(\005\"\226\001"
    "\n\035msg_response_classicddz_start\022\017\n\007table"
    "Id\030\001 \002(\003\022+\n\nplayerInfo\030\002 \003(\0132\027.classicdd"
    "z_player_info\022)\n\tdizhuInfo\030\003 \002(\0132\026.class"
    "icddz_dizhu_info\022\014\n\004data\030\004 \002(\014\"K\n\033msg_re"
    "quest_classicddz_call\022\017\n\007tableId\030\001 \002(\003\022\014"
    "\n\004seat\030\002 \002(\005\022\r\n\005score\030\003 \002(\005\"M\n\034msg_respo"
    "nse_classicddz_call\022\014\n\004seat\030\001 \002(\005\022\r\n\005sco"
    "re\030\002 \002(\005\022\020\n\010callSeat\030\003 \001(\005\"R\n%msg_respon"
    "se_classicddz_start_discard\022\014\n\004seat\030\001 \002("
    "\005\022\r\n\005score\030\002 \002(\005\022\014\n\004data\030\003 \002(\014\"]\n\036msg_re"
    "quest_classicddz_discard\022\017\n\007tableId\030\001 \002("
    "\003\022\014\n\004seat\030\002 \002(\005\022\034\n\010cardInfo\030\003 \002(\0132\n.card"
    "_info\"M\n\037msg_response_classicddz_discard"
    "\022\014\n\004seat\030\001 \002(\005\022\034\n\010cardInfo\030\002 \002(\0132\n.card_"
    "info\"1\n\033msg_response_classicddz_end\022\022\n\ni"
    "sDiZhuWin\030\001 \002(\010*\312\001\n\034e_classic_doudizhu_c"
    "ard_type\022\014\n\010e_card_0\020\000\022\016\n\010e_card_1\020\205\202\004\022\016"
    "\n\010e_card_2\020\203\202\010\022\016\n\010e_card_3\020\202\202\014\022\020\n\ne_card"
    "_3_1\020\222\242\014\022\020\n\ne_card_3_2\020\222\302\014\022\016\n\010e_card_4\020\200"
    "\202\020\022\020\n\ne_card_4_1\020\220\242\020\022\022\n\014e_card_4_2_1\020\240\242\020"
    "\022\022\n\014e_card_4_2_2\020\240\302\020*\241\002\n\022e_classicddz_ms"
    "gid\022\036\n\030request_classicddz_start\020\241\234\001\022\037\n\031r"
    "esponse_classicddz_start\020\242\234\001\022\035\n\027request_"
    "classicddz_call\020\254\234\001\022\036\n\030response_classicd"
    "dz_call\020\255\234\001\022\'\n!response_classicddz_start"
    "_discard\020\265\234\001\022 \n\032request_classicddz_disca"
    "rd\020\266\234\001\022!\n\033response_classicddz_discard\020\267\234"
    "\001\022\035\n\027response_classicddz_end\020\270\234\001", 1312);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "classicddz.proto", &protobuf_RegisterTypes);
  msg_request_classicddz_start::default_instance_ = new msg_request_classicddz_start();
  classicddz_player_info::default_instance_ = new classicddz_player_info();
  classicddz_dizhu_info::default_instance_ = new classicddz_dizhu_info();
  msg_response_classicddz_start::default_instance_ = new msg_response_classicddz_start();
  msg_request_classicddz_call::default_instance_ = new msg_request_classicddz_call();
  msg_response_classicddz_call::default_instance_ = new msg_response_classicddz_call();
  msg_response_classicddz_start_discard::default_instance_ = new msg_response_classicddz_start_discard();
  msg_request_classicddz_discard::default_instance_ = new msg_request_classicddz_discard();
  msg_response_classicddz_discard::default_instance_ = new msg_response_classicddz_discard();
  msg_response_classicddz_end::default_instance_ = new msg_response_classicddz_end();
  msg_request_classicddz_start::default_instance_->InitAsDefaultInstance();
  classicddz_player_info::default_instance_->InitAsDefaultInstance();
  classicddz_dizhu_info::default_instance_->InitAsDefaultInstance();
  msg_response_classicddz_start::default_instance_->InitAsDefaultInstance();
  msg_request_classicddz_call::default_instance_->InitAsDefaultInstance();
  msg_response_classicddz_call::default_instance_->InitAsDefaultInstance();
  msg_response_classicddz_start_discard::default_instance_->InitAsDefaultInstance();
  msg_request_classicddz_discard::default_instance_->InitAsDefaultInstance();
  msg_response_classicddz_discard::default_instance_->InitAsDefaultInstance();
  msg_response_classicddz_end::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_classicddz_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_classicddz_2eproto {
  StaticDescriptorInitializer_classicddz_2eproto() {
    protobuf_AddDesc_classicddz_2eproto();
  }
} static_descriptor_initializer_classicddz_2eproto_;
const ::google::protobuf::EnumDescriptor* e_classic_doudizhu_card_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return e_classic_doudizhu_card_type_descriptor_;
}
bool e_classic_doudizhu_card_type_IsValid(int value) {
  switch(value) {
    case 0:
    case 65797:
    case 131331:
    case 196866:
    case 200978:
    case 205074:
    case 262400:
    case 266512:
    case 266528:
    case 270624:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* e_classicddz_msgid_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return e_classicddz_msgid_descriptor_;
}
bool e_classicddz_msgid_IsValid(int value) {
  switch(value) {
    case 20001:
    case 20002:
    case 20012:
    case 20013:
    case 20021:
    case 20022:
    case 20023:
    case 20024:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int msg_request_classicddz_start::kUidFieldNumber;
#endif  // !_MSC_VER

msg_request_classicddz_start::msg_request_classicddz_start()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_request_classicddz_start::InitAsDefaultInstance() {
}

msg_request_classicddz_start::msg_request_classicddz_start(const msg_request_classicddz_start& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_request_classicddz_start::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_request_classicddz_start::~msg_request_classicddz_start() {
  SharedDtor();
}

void msg_request_classicddz_start::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_request_classicddz_start::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_request_classicddz_start::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_request_classicddz_start_descriptor_;
}

const msg_request_classicddz_start& msg_request_classicddz_start::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_classicddz_2eproto();
  return *default_instance_;
}

msg_request_classicddz_start* msg_request_classicddz_start::default_instance_ = NULL;

msg_request_classicddz_start* msg_request_classicddz_start::New() const {
  return new msg_request_classicddz_start;
}

void msg_request_classicddz_start::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_request_classicddz_start::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_request_classicddz_start::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_request_classicddz_start::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_request_classicddz_start::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_request_classicddz_start::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_request_classicddz_start* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_request_classicddz_start*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_request_classicddz_start::MergeFrom(const msg_request_classicddz_start& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_request_classicddz_start::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_request_classicddz_start::CopyFrom(const msg_request_classicddz_start& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_request_classicddz_start::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void msg_request_classicddz_start::Swap(msg_request_classicddz_start* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_request_classicddz_start::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_request_classicddz_start_descriptor_;
  metadata.reflection = msg_request_classicddz_start_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int classicddz_player_info::kUidFieldNumber;
const int classicddz_player_info::kSeatFieldNumber;
#endif  // !_MSC_VER

classicddz_player_info::classicddz_player_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void classicddz_player_info::InitAsDefaultInstance() {
}

classicddz_player_info::classicddz_player_info(const classicddz_player_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void classicddz_player_info::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  seat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

classicddz_player_info::~classicddz_player_info() {
  SharedDtor();
}

void classicddz_player_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void classicddz_player_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* classicddz_player_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return classicddz_player_info_descriptor_;
}

const classicddz_player_info& classicddz_player_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_classicddz_2eproto();
  return *default_instance_;
}

classicddz_player_info* classicddz_player_info::default_instance_ = NULL;

classicddz_player_info* classicddz_player_info::New() const {
  return new classicddz_player_info;
}

void classicddz_player_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(0);
    seat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool classicddz_player_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_seat;
        break;
      }

      // required int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void classicddz_player_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // required int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* classicddz_player_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // required int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int classicddz_player_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }

    // required int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void classicddz_player_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const classicddz_player_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const classicddz_player_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void classicddz_player_info::MergeFrom(const classicddz_player_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_seat()) {
      set_seat(from.seat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void classicddz_player_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void classicddz_player_info::CopyFrom(const classicddz_player_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool classicddz_player_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void classicddz_player_info::Swap(classicddz_player_info* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(seat_, other->seat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata classicddz_player_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = classicddz_player_info_descriptor_;
  metadata.reflection = classicddz_player_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int classicddz_dizhu_info::kSeatFieldNumber;
const int classicddz_dizhu_info::kPosFieldNumber;
const int classicddz_dizhu_info::kCardIdFieldNumber;
#endif  // !_MSC_VER

classicddz_dizhu_info::classicddz_dizhu_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void classicddz_dizhu_info::InitAsDefaultInstance() {
}

classicddz_dizhu_info::classicddz_dizhu_info(const classicddz_dizhu_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void classicddz_dizhu_info::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  pos_ = 0;
  cardid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

classicddz_dizhu_info::~classicddz_dizhu_info() {
  SharedDtor();
}

void classicddz_dizhu_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void classicddz_dizhu_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* classicddz_dizhu_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return classicddz_dizhu_info_descriptor_;
}

const classicddz_dizhu_info& classicddz_dizhu_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_classicddz_2eproto();
  return *default_instance_;
}

classicddz_dizhu_info* classicddz_dizhu_info::default_instance_ = NULL;

classicddz_dizhu_info* classicddz_dizhu_info::New() const {
  return new classicddz_dizhu_info;
}

void classicddz_dizhu_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    pos_ = 0;
    cardid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool classicddz_dizhu_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // required int32 pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cardId;
        break;
      }

      // required int32 cardId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardid_)));
          set_has_cardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void classicddz_dizhu_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }

  // required int32 pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pos(), output);
  }

  // required int32 cardId = 3;
  if (has_cardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cardid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* classicddz_dizhu_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat(), target);
  }

  // required int32 pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pos(), target);
  }

  // required int32 cardId = 3;
  if (has_cardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cardid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int classicddz_dizhu_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // required int32 pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

    // required int32 cardId = 3;
    if (has_cardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void classicddz_dizhu_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const classicddz_dizhu_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const classicddz_dizhu_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void classicddz_dizhu_info::MergeFrom(const classicddz_dizhu_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_cardid()) {
      set_cardid(from.cardid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void classicddz_dizhu_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void classicddz_dizhu_info::CopyFrom(const classicddz_dizhu_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool classicddz_dizhu_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void classicddz_dizhu_info::Swap(classicddz_dizhu_info* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(pos_, other->pos_);
    std::swap(cardid_, other->cardid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata classicddz_dizhu_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = classicddz_dizhu_info_descriptor_;
  metadata.reflection = classicddz_dizhu_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_response_classicddz_start::kTableIdFieldNumber;
const int msg_response_classicddz_start::kPlayerInfoFieldNumber;
const int msg_response_classicddz_start::kDizhuInfoFieldNumber;
const int msg_response_classicddz_start::kDataFieldNumber;
#endif  // !_MSC_VER

msg_response_classicddz_start::msg_response_classicddz_start()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_response_classicddz_start::InitAsDefaultInstance() {
  dizhuinfo_ = const_cast< ::classicddz_dizhu_info*>(&::classicddz_dizhu_info::default_instance());
}

msg_response_classicddz_start::msg_response_classicddz_start(const msg_response_classicddz_start& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_response_classicddz_start::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = GOOGLE_LONGLONG(0);
  dizhuinfo_ = NULL;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_response_classicddz_start::~msg_response_classicddz_start() {
  SharedDtor();
}

void msg_response_classicddz_start::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
    delete dizhuinfo_;
  }
}

void msg_response_classicddz_start::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_response_classicddz_start::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_response_classicddz_start_descriptor_;
}

const msg_response_classicddz_start& msg_response_classicddz_start::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_classicddz_2eproto();
  return *default_instance_;
}

msg_response_classicddz_start* msg_response_classicddz_start::default_instance_ = NULL;

msg_response_classicddz_start* msg_response_classicddz_start::New() const {
  return new msg_response_classicddz_start;
}

void msg_response_classicddz_start::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tableid_ = GOOGLE_LONGLONG(0);
    if (has_dizhuinfo()) {
      if (dizhuinfo_ != NULL) dizhuinfo_->::classicddz_dizhu_info::Clear();
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  playerinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_response_classicddz_start::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 tableId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_playerInfo;
        break;
      }

      // repeated .classicddz_player_info playerInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playerinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_playerInfo;
        if (input->ExpectTag(26)) goto parse_dizhuInfo;
        break;
      }

      // required .classicddz_dizhu_info dizhuInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dizhuInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dizhuinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // required bytes data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_response_classicddz_start::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 tableId = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->tableid(), output);
  }

  // repeated .classicddz_player_info playerInfo = 2;
  for (int i = 0; i < this->playerinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->playerinfo(i), output);
  }

  // required .classicddz_dizhu_info dizhuInfo = 3;
  if (has_dizhuinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->dizhuinfo(), output);
  }

  // required bytes data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_response_classicddz_start::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 tableId = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->tableid(), target);
  }

  // repeated .classicddz_player_info playerInfo = 2;
  for (int i = 0; i < this->playerinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->playerinfo(i), target);
  }

  // required .classicddz_dizhu_info dizhuInfo = 3;
  if (has_dizhuinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->dizhuinfo(), target);
  }

  // required bytes data = 4;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_response_classicddz_start::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 tableId = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tableid());
    }

    // required .classicddz_dizhu_info dizhuInfo = 3;
    if (has_dizhuinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dizhuinfo());
    }

    // required bytes data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  // repeated .classicddz_player_info playerInfo = 2;
  total_size += 1 * this->playerinfo_size();
  for (int i = 0; i < this->playerinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playerinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_response_classicddz_start::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_response_classicddz_start* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_response_classicddz_start*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_response_classicddz_start::MergeFrom(const msg_response_classicddz_start& from) {
  GOOGLE_CHECK_NE(&from, this);
  playerinfo_.MergeFrom(from.playerinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_dizhuinfo()) {
      mutable_dizhuinfo()->::classicddz_dizhu_info::MergeFrom(from.dizhuinfo());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_response_classicddz_start::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_response_classicddz_start::CopyFrom(const msg_response_classicddz_start& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_response_classicddz_start::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  for (int i = 0; i < playerinfo_size(); i++) {
    if (!this->playerinfo(i).IsInitialized()) return false;
  }
  if (has_dizhuinfo()) {
    if (!this->dizhuinfo().IsInitialized()) return false;
  }
  return true;
}

void msg_response_classicddz_start::Swap(msg_response_classicddz_start* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    playerinfo_.Swap(&other->playerinfo_);
    std::swap(dizhuinfo_, other->dizhuinfo_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_response_classicddz_start::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_response_classicddz_start_descriptor_;
  metadata.reflection = msg_response_classicddz_start_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_request_classicddz_call::kTableIdFieldNumber;
const int msg_request_classicddz_call::kSeatFieldNumber;
const int msg_request_classicddz_call::kScoreFieldNumber;
#endif  // !_MSC_VER

msg_request_classicddz_call::msg_request_classicddz_call()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_request_classicddz_call::InitAsDefaultInstance() {
}

msg_request_classicddz_call::msg_request_classicddz_call(const msg_request_classicddz_call& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_request_classicddz_call::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = GOOGLE_LONGLONG(0);
  seat_ = 0;
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_request_classicddz_call::~msg_request_classicddz_call() {
  SharedDtor();
}

void msg_request_classicddz_call::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_request_classicddz_call::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_request_classicddz_call::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_request_classicddz_call_descriptor_;
}

const msg_request_classicddz_call& msg_request_classicddz_call::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_classicddz_2eproto();
  return *default_instance_;
}

msg_request_classicddz_call* msg_request_classicddz_call::default_instance_ = NULL;

msg_request_classicddz_call* msg_request_classicddz_call::New() const {
  return new msg_request_classicddz_call;
}

void msg_request_classicddz_call::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tableid_ = GOOGLE_LONGLONG(0);
    seat_ = 0;
    score_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_request_classicddz_call::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 tableId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_seat;
        break;
      }

      // required int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_score;
        break;
      }

      // required int32 score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_request_classicddz_call::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 tableId = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->tableid(), output);
  }

  // required int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // required int32 score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_request_classicddz_call::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 tableId = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->tableid(), target);
  }

  // required int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // required int32 score = 3;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_request_classicddz_call::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 tableId = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tableid());
    }

    // required int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // required int32 score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_request_classicddz_call::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_request_classicddz_call* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_request_classicddz_call*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_request_classicddz_call::MergeFrom(const msg_request_classicddz_call& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_request_classicddz_call::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_request_classicddz_call::CopyFrom(const msg_request_classicddz_call& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_request_classicddz_call::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void msg_request_classicddz_call::Swap(msg_request_classicddz_call* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(seat_, other->seat_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_request_classicddz_call::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_request_classicddz_call_descriptor_;
  metadata.reflection = msg_request_classicddz_call_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_response_classicddz_call::kSeatFieldNumber;
const int msg_response_classicddz_call::kScoreFieldNumber;
const int msg_response_classicddz_call::kCallSeatFieldNumber;
#endif  // !_MSC_VER

msg_response_classicddz_call::msg_response_classicddz_call()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_response_classicddz_call::InitAsDefaultInstance() {
}

msg_response_classicddz_call::msg_response_classicddz_call(const msg_response_classicddz_call& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_response_classicddz_call::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  score_ = 0;
  callseat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_response_classicddz_call::~msg_response_classicddz_call() {
  SharedDtor();
}

void msg_response_classicddz_call::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_response_classicddz_call::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_response_classicddz_call::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_response_classicddz_call_descriptor_;
}

const msg_response_classicddz_call& msg_response_classicddz_call::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_classicddz_2eproto();
  return *default_instance_;
}

msg_response_classicddz_call* msg_response_classicddz_call::default_instance_ = NULL;

msg_response_classicddz_call* msg_response_classicddz_call::New() const {
  return new msg_response_classicddz_call;
}

void msg_response_classicddz_call::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    score_ = 0;
    callseat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_response_classicddz_call::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // required int32 score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_callSeat;
        break;
      }

      // optional int32 callSeat = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_callSeat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &callseat_)));
          set_has_callseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_response_classicddz_call::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }

  // required int32 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->score(), output);
  }

  // optional int32 callSeat = 3;
  if (has_callseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->callseat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_response_classicddz_call::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat(), target);
  }

  // required int32 score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->score(), target);
  }

  // optional int32 callSeat = 3;
  if (has_callseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->callseat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_response_classicddz_call::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // required int32 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional int32 callSeat = 3;
    if (has_callseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->callseat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_response_classicddz_call::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_response_classicddz_call* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_response_classicddz_call*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_response_classicddz_call::MergeFrom(const msg_response_classicddz_call& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_callseat()) {
      set_callseat(from.callseat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_response_classicddz_call::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_response_classicddz_call::CopyFrom(const msg_response_classicddz_call& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_response_classicddz_call::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void msg_response_classicddz_call::Swap(msg_response_classicddz_call* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(score_, other->score_);
    std::swap(callseat_, other->callseat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_response_classicddz_call::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_response_classicddz_call_descriptor_;
  metadata.reflection = msg_response_classicddz_call_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_response_classicddz_start_discard::kSeatFieldNumber;
const int msg_response_classicddz_start_discard::kScoreFieldNumber;
const int msg_response_classicddz_start_discard::kDataFieldNumber;
#endif  // !_MSC_VER

msg_response_classicddz_start_discard::msg_response_classicddz_start_discard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_response_classicddz_start_discard::InitAsDefaultInstance() {
}

msg_response_classicddz_start_discard::msg_response_classicddz_start_discard(const msg_response_classicddz_start_discard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_response_classicddz_start_discard::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  score_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_response_classicddz_start_discard::~msg_response_classicddz_start_discard() {
  SharedDtor();
}

void msg_response_classicddz_start_discard::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void msg_response_classicddz_start_discard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_response_classicddz_start_discard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_response_classicddz_start_discard_descriptor_;
}

const msg_response_classicddz_start_discard& msg_response_classicddz_start_discard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_classicddz_2eproto();
  return *default_instance_;
}

msg_response_classicddz_start_discard* msg_response_classicddz_start_discard::default_instance_ = NULL;

msg_response_classicddz_start_discard* msg_response_classicddz_start_discard::New() const {
  return new msg_response_classicddz_start_discard;
}

void msg_response_classicddz_start_discard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    score_ = 0;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_response_classicddz_start_discard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // required int32 score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // required bytes data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_response_classicddz_start_discard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }

  // required int32 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->score(), output);
  }

  // required bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_response_classicddz_start_discard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat(), target);
  }

  // required int32 score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->score(), target);
  }

  // required bytes data = 3;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_response_classicddz_start_discard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // required int32 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // required bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_response_classicddz_start_discard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_response_classicddz_start_discard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_response_classicddz_start_discard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_response_classicddz_start_discard::MergeFrom(const msg_response_classicddz_start_discard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_response_classicddz_start_discard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_response_classicddz_start_discard::CopyFrom(const msg_response_classicddz_start_discard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_response_classicddz_start_discard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void msg_response_classicddz_start_discard::Swap(msg_response_classicddz_start_discard* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(score_, other->score_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_response_classicddz_start_discard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_response_classicddz_start_discard_descriptor_;
  metadata.reflection = msg_response_classicddz_start_discard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_request_classicddz_discard::kTableIdFieldNumber;
const int msg_request_classicddz_discard::kSeatFieldNumber;
const int msg_request_classicddz_discard::kCardInfoFieldNumber;
#endif  // !_MSC_VER

msg_request_classicddz_discard::msg_request_classicddz_discard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_request_classicddz_discard::InitAsDefaultInstance() {
  cardinfo_ = const_cast< ::card_info*>(&::card_info::default_instance());
}

msg_request_classicddz_discard::msg_request_classicddz_discard(const msg_request_classicddz_discard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_request_classicddz_discard::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = GOOGLE_LONGLONG(0);
  seat_ = 0;
  cardinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_request_classicddz_discard::~msg_request_classicddz_discard() {
  SharedDtor();
}

void msg_request_classicddz_discard::SharedDtor() {
  if (this != default_instance_) {
    delete cardinfo_;
  }
}

void msg_request_classicddz_discard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_request_classicddz_discard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_request_classicddz_discard_descriptor_;
}

const msg_request_classicddz_discard& msg_request_classicddz_discard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_classicddz_2eproto();
  return *default_instance_;
}

msg_request_classicddz_discard* msg_request_classicddz_discard::default_instance_ = NULL;

msg_request_classicddz_discard* msg_request_classicddz_discard::New() const {
  return new msg_request_classicddz_discard;
}

void msg_request_classicddz_discard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tableid_ = GOOGLE_LONGLONG(0);
    seat_ = 0;
    if (has_cardinfo()) {
      if (cardinfo_ != NULL) cardinfo_->::card_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_request_classicddz_discard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 tableId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_seat;
        break;
      }

      // required int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cardInfo;
        break;
      }

      // required .card_info cardInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cardInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cardinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_request_classicddz_discard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 tableId = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->tableid(), output);
  }

  // required int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // required .card_info cardInfo = 3;
  if (has_cardinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cardinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_request_classicddz_discard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 tableId = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->tableid(), target);
  }

  // required int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // required .card_info cardInfo = 3;
  if (has_cardinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cardinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_request_classicddz_discard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 tableId = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tableid());
    }

    // required int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // required .card_info cardInfo = 3;
    if (has_cardinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cardinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_request_classicddz_discard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_request_classicddz_discard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_request_classicddz_discard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_request_classicddz_discard::MergeFrom(const msg_request_classicddz_discard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_cardinfo()) {
      mutable_cardinfo()->::card_info::MergeFrom(from.cardinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_request_classicddz_discard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_request_classicddz_discard::CopyFrom(const msg_request_classicddz_discard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_request_classicddz_discard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_cardinfo()) {
    if (!this->cardinfo().IsInitialized()) return false;
  }
  return true;
}

void msg_request_classicddz_discard::Swap(msg_request_classicddz_discard* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(seat_, other->seat_);
    std::swap(cardinfo_, other->cardinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_request_classicddz_discard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_request_classicddz_discard_descriptor_;
  metadata.reflection = msg_request_classicddz_discard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_response_classicddz_discard::kSeatFieldNumber;
const int msg_response_classicddz_discard::kCardInfoFieldNumber;
#endif  // !_MSC_VER

msg_response_classicddz_discard::msg_response_classicddz_discard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_response_classicddz_discard::InitAsDefaultInstance() {
  cardinfo_ = const_cast< ::card_info*>(&::card_info::default_instance());
}

msg_response_classicddz_discard::msg_response_classicddz_discard(const msg_response_classicddz_discard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_response_classicddz_discard::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  cardinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_response_classicddz_discard::~msg_response_classicddz_discard() {
  SharedDtor();
}

void msg_response_classicddz_discard::SharedDtor() {
  if (this != default_instance_) {
    delete cardinfo_;
  }
}

void msg_response_classicddz_discard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_response_classicddz_discard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_response_classicddz_discard_descriptor_;
}

const msg_response_classicddz_discard& msg_response_classicddz_discard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_classicddz_2eproto();
  return *default_instance_;
}

msg_response_classicddz_discard* msg_response_classicddz_discard::default_instance_ = NULL;

msg_response_classicddz_discard* msg_response_classicddz_discard::New() const {
  return new msg_response_classicddz_discard;
}

void msg_response_classicddz_discard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    if (has_cardinfo()) {
      if (cardinfo_ != NULL) cardinfo_->::card_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_response_classicddz_discard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cardInfo;
        break;
      }

      // required .card_info cardInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cardInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cardinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_response_classicddz_discard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }

  // required .card_info cardInfo = 2;
  if (has_cardinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cardinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_response_classicddz_discard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat(), target);
  }

  // required .card_info cardInfo = 2;
  if (has_cardinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cardinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_response_classicddz_discard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // required .card_info cardInfo = 2;
    if (has_cardinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cardinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_response_classicddz_discard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_response_classicddz_discard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_response_classicddz_discard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_response_classicddz_discard::MergeFrom(const msg_response_classicddz_discard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_cardinfo()) {
      mutable_cardinfo()->::card_info::MergeFrom(from.cardinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_response_classicddz_discard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_response_classicddz_discard::CopyFrom(const msg_response_classicddz_discard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_response_classicddz_discard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_cardinfo()) {
    if (!this->cardinfo().IsInitialized()) return false;
  }
  return true;
}

void msg_response_classicddz_discard::Swap(msg_response_classicddz_discard* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(cardinfo_, other->cardinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_response_classicddz_discard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_response_classicddz_discard_descriptor_;
  metadata.reflection = msg_response_classicddz_discard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_response_classicddz_end::kIsDiZhuWinFieldNumber;
#endif  // !_MSC_VER

msg_response_classicddz_end::msg_response_classicddz_end()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_response_classicddz_end::InitAsDefaultInstance() {
}

msg_response_classicddz_end::msg_response_classicddz_end(const msg_response_classicddz_end& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_response_classicddz_end::SharedCtor() {
  _cached_size_ = 0;
  isdizhuwin_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_response_classicddz_end::~msg_response_classicddz_end() {
  SharedDtor();
}

void msg_response_classicddz_end::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_response_classicddz_end::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_response_classicddz_end::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_response_classicddz_end_descriptor_;
}

const msg_response_classicddz_end& msg_response_classicddz_end::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_classicddz_2eproto();
  return *default_instance_;
}

msg_response_classicddz_end* msg_response_classicddz_end::default_instance_ = NULL;

msg_response_classicddz_end* msg_response_classicddz_end::New() const {
  return new msg_response_classicddz_end;
}

void msg_response_classicddz_end::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isdizhuwin_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_response_classicddz_end::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool isDiZhuWin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdizhuwin_)));
          set_has_isdizhuwin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_response_classicddz_end::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool isDiZhuWin = 1;
  if (has_isdizhuwin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isdizhuwin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_response_classicddz_end::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool isDiZhuWin = 1;
  if (has_isdizhuwin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isdizhuwin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_response_classicddz_end::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool isDiZhuWin = 1;
    if (has_isdizhuwin()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_response_classicddz_end::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_response_classicddz_end* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_response_classicddz_end*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_response_classicddz_end::MergeFrom(const msg_response_classicddz_end& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isdizhuwin()) {
      set_isdizhuwin(from.isdizhuwin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_response_classicddz_end::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_response_classicddz_end::CopyFrom(const msg_response_classicddz_end& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_response_classicddz_end::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void msg_response_classicddz_end::Swap(msg_response_classicddz_end* other) {
  if (other != this) {
    std::swap(isdizhuwin_, other->isdizhuwin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_response_classicddz_end::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_response_classicddz_end_descriptor_;
  metadata.reflection = msg_response_classicddz_end_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.proto

#ifndef PROTOBUF_chat_2eproto__INCLUDED
#define PROTOBUF_chat_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_chat_2eproto();
void protobuf_AssignDesc_chat_2eproto();
void protobuf_ShutdownFile_chat_2eproto();

class msg_request_send_content;
class msg_response_send_content;

enum e_chat_msgid {
  request_send_content = 10001,
  response_send_content = 10002
};
bool e_chat_msgid_IsValid(int value);
const e_chat_msgid e_chat_msgid_MIN = request_send_content;
const e_chat_msgid e_chat_msgid_MAX = response_send_content;
const int e_chat_msgid_ARRAYSIZE = e_chat_msgid_MAX + 1;

const ::google::protobuf::EnumDescriptor* e_chat_msgid_descriptor();
inline const ::std::string& e_chat_msgid_Name(e_chat_msgid value) {
  return ::google::protobuf::internal::NameOfEnum(
    e_chat_msgid_descriptor(), value);
}
inline bool e_chat_msgid_Parse(
    const ::std::string& name, e_chat_msgid* value) {
  return ::google::protobuf::internal::ParseNamedEnum<e_chat_msgid>(
    e_chat_msgid_descriptor(), name, value);
}
// ===================================================================

class msg_request_send_content : public ::google::protobuf::Message {
 public:
  msg_request_send_content();
  virtual ~msg_request_send_content();

  msg_request_send_content(const msg_request_send_content& from);

  inline msg_request_send_content& operator=(const msg_request_send_content& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_request_send_content& default_instance();

  void Swap(msg_request_send_content* other);

  // implements Message ----------------------------------------------

  msg_request_send_content* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_request_send_content& from);
  void MergeFrom(const msg_request_send_content& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string toid = 1;
  inline bool has_toid() const;
  inline void clear_toid();
  static const int kToidFieldNumber = 1;
  inline const ::std::string& toid() const;
  inline void set_toid(const ::std::string& value);
  inline void set_toid(const char* value);
  inline void set_toid(const char* value, size_t size);
  inline ::std::string* mutable_toid();
  inline ::std::string* release_toid();
  inline void set_allocated_toid(::std::string* toid);

  // required string content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:msg_request_send_content)
 private:
  inline void set_has_toid();
  inline void clear_has_toid();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* toid_;
  ::std::string* content_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static msg_request_send_content* default_instance_;
};
// -------------------------------------------------------------------

class msg_response_send_content : public ::google::protobuf::Message {
 public:
  msg_response_send_content();
  virtual ~msg_response_send_content();

  msg_response_send_content(const msg_response_send_content& from);

  inline msg_response_send_content& operator=(const msg_response_send_content& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_response_send_content& default_instance();

  void Swap(msg_response_send_content* other);

  // implements Message ----------------------------------------------

  msg_response_send_content* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_response_send_content& from);
  void MergeFrom(const msg_response_send_content& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string fromid = 1;
  inline bool has_fromid() const;
  inline void clear_fromid();
  static const int kFromidFieldNumber = 1;
  inline const ::std::string& fromid() const;
  inline void set_fromid(const ::std::string& value);
  inline void set_fromid(const char* value);
  inline void set_fromid(const char* value, size_t size);
  inline ::std::string* mutable_fromid();
  inline ::std::string* release_fromid();
  inline void set_allocated_fromid(::std::string* fromid);

  // required string content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:msg_response_send_content)
 private:
  inline void set_has_fromid();
  inline void clear_has_fromid();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* fromid_;
  ::std::string* content_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static msg_response_send_content* default_instance_;
};
// ===================================================================


// ===================================================================

// msg_request_send_content

// required string toid = 1;
inline bool msg_request_send_content::has_toid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_request_send_content::set_has_toid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_request_send_content::clear_has_toid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_request_send_content::clear_toid() {
  if (toid_ != &::google::protobuf::internal::kEmptyString) {
    toid_->clear();
  }
  clear_has_toid();
}
inline const ::std::string& msg_request_send_content::toid() const {
  return *toid_;
}
inline void msg_request_send_content::set_toid(const ::std::string& value) {
  set_has_toid();
  if (toid_ == &::google::protobuf::internal::kEmptyString) {
    toid_ = new ::std::string;
  }
  toid_->assign(value);
}
inline void msg_request_send_content::set_toid(const char* value) {
  set_has_toid();
  if (toid_ == &::google::protobuf::internal::kEmptyString) {
    toid_ = new ::std::string;
  }
  toid_->assign(value);
}
inline void msg_request_send_content::set_toid(const char* value, size_t size) {
  set_has_toid();
  if (toid_ == &::google::protobuf::internal::kEmptyString) {
    toid_ = new ::std::string;
  }
  toid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_request_send_content::mutable_toid() {
  set_has_toid();
  if (toid_ == &::google::protobuf::internal::kEmptyString) {
    toid_ = new ::std::string;
  }
  return toid_;
}
inline ::std::string* msg_request_send_content::release_toid() {
  clear_has_toid();
  if (toid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = toid_;
    toid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_request_send_content::set_allocated_toid(::std::string* toid) {
  if (toid_ != &::google::protobuf::internal::kEmptyString) {
    delete toid_;
  }
  if (toid) {
    set_has_toid();
    toid_ = toid;
  } else {
    clear_has_toid();
    toid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string content = 2;
inline bool msg_request_send_content::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_request_send_content::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_request_send_content::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_request_send_content::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& msg_request_send_content::content() const {
  return *content_;
}
inline void msg_request_send_content::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void msg_request_send_content::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void msg_request_send_content::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_request_send_content::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* msg_request_send_content::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_request_send_content::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// msg_response_send_content

// required string fromid = 1;
inline bool msg_response_send_content::has_fromid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_response_send_content::set_has_fromid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_response_send_content::clear_has_fromid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_response_send_content::clear_fromid() {
  if (fromid_ != &::google::protobuf::internal::kEmptyString) {
    fromid_->clear();
  }
  clear_has_fromid();
}
inline const ::std::string& msg_response_send_content::fromid() const {
  return *fromid_;
}
inline void msg_response_send_content::set_fromid(const ::std::string& value) {
  set_has_fromid();
  if (fromid_ == &::google::protobuf::internal::kEmptyString) {
    fromid_ = new ::std::string;
  }
  fromid_->assign(value);
}
inline void msg_response_send_content::set_fromid(const char* value) {
  set_has_fromid();
  if (fromid_ == &::google::protobuf::internal::kEmptyString) {
    fromid_ = new ::std::string;
  }
  fromid_->assign(value);
}
inline void msg_response_send_content::set_fromid(const char* value, size_t size) {
  set_has_fromid();
  if (fromid_ == &::google::protobuf::internal::kEmptyString) {
    fromid_ = new ::std::string;
  }
  fromid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_response_send_content::mutable_fromid() {
  set_has_fromid();
  if (fromid_ == &::google::protobuf::internal::kEmptyString) {
    fromid_ = new ::std::string;
  }
  return fromid_;
}
inline ::std::string* msg_response_send_content::release_fromid() {
  clear_has_fromid();
  if (fromid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fromid_;
    fromid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_response_send_content::set_allocated_fromid(::std::string* fromid) {
  if (fromid_ != &::google::protobuf::internal::kEmptyString) {
    delete fromid_;
  }
  if (fromid) {
    set_has_fromid();
    fromid_ = fromid;
  } else {
    clear_has_fromid();
    fromid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string content = 2;
inline bool msg_response_send_content::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_response_send_content::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_response_send_content::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_response_send_content::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& msg_response_send_content::content() const {
  return *content_;
}
inline void msg_response_send_content::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void msg_response_send_content::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void msg_response_send_content::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_response_send_content::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* msg_response_send_content::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_response_send_content::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::e_chat_msgid>() {
  return ::e_chat_msgid_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_chat_2eproto__INCLUDED

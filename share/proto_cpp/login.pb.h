// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: login.proto

#ifndef PROTOBUF_login_2eproto__INCLUDED
#define PROTOBUF_login_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_login_2eproto();
void protobuf_AssignDesc_login_2eproto();
void protobuf_ShutdownFile_login_2eproto();

class msg_request_enter_game;
class msg_response_enter_game;

enum e_login_msgid {
  request_enter_game = 10001,
  response_enter_game = 10002
};
bool e_login_msgid_IsValid(int value);
const e_login_msgid e_login_msgid_MIN = request_enter_game;
const e_login_msgid e_login_msgid_MAX = response_enter_game;
const int e_login_msgid_ARRAYSIZE = e_login_msgid_MAX + 1;

const ::google::protobuf::EnumDescriptor* e_login_msgid_descriptor();
inline const ::std::string& e_login_msgid_Name(e_login_msgid value) {
  return ::google::protobuf::internal::NameOfEnum(
    e_login_msgid_descriptor(), value);
}
inline bool e_login_msgid_Parse(
    const ::std::string& name, e_login_msgid* value) {
  return ::google::protobuf::internal::ParseNamedEnum<e_login_msgid>(
    e_login_msgid_descriptor(), name, value);
}
// ===================================================================

class msg_request_enter_game : public ::google::protobuf::Message {
 public:
  msg_request_enter_game();
  virtual ~msg_request_enter_game();

  msg_request_enter_game(const msg_request_enter_game& from);

  inline msg_request_enter_game& operator=(const msg_request_enter_game& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_request_enter_game& default_instance();

  void Swap(msg_request_enter_game* other);

  // implements Message ----------------------------------------------

  msg_request_enter_game* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_request_enter_game& from);
  void MergeFrom(const msg_request_enter_game& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string username = 1;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 1;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // @@protoc_insertion_point(class_scope:msg_request_enter_game)
 private:
  inline void set_has_username();
  inline void clear_has_username();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* username_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static msg_request_enter_game* default_instance_;
};
// -------------------------------------------------------------------

class msg_response_enter_game : public ::google::protobuf::Message {
 public:
  msg_response_enter_game();
  virtual ~msg_response_enter_game();

  msg_response_enter_game(const msg_response_enter_game& from);

  inline msg_response_enter_game& operator=(const msg_response_enter_game& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_response_enter_game& default_instance();

  void Swap(msg_response_enter_game* other);

  // implements Message ----------------------------------------------

  msg_response_enter_game* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_response_enter_game& from);
  void MergeFrom(const msg_response_enter_game& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 errno = 1;
  inline bool has_errno() const;
  inline void clear_errno();
  static const int kErrnoFieldNumber = 1;
  inline ::google::protobuf::int32 errno() const;
  inline void set_errno(::google::protobuf::int32 value);

  // required string username = 2;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 2;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // @@protoc_insertion_point(class_scope:msg_response_enter_game)
 private:
  inline void set_has_errno();
  inline void clear_has_errno();
  inline void set_has_username();
  inline void clear_has_username();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* username_;
  ::google::protobuf::int32 errno_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static msg_response_enter_game* default_instance_;
};
// ===================================================================


// ===================================================================

// msg_request_enter_game

// required string username = 1;
inline bool msg_request_enter_game::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_request_enter_game::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_request_enter_game::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_request_enter_game::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& msg_request_enter_game::username() const {
  return *username_;
}
inline void msg_request_enter_game::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void msg_request_enter_game::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void msg_request_enter_game::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_request_enter_game::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* msg_request_enter_game::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_request_enter_game::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// msg_response_enter_game

// required int32 errno = 1;
inline bool msg_response_enter_game::has_errno() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_response_enter_game::set_has_errno() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_response_enter_game::clear_has_errno() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_response_enter_game::clear_errno() {
  errno_ = 0;
  clear_has_errno();
}
inline ::google::protobuf::int32 msg_response_enter_game::errno() const {
  return errno_;
}
inline void msg_response_enter_game::set_errno(::google::protobuf::int32 value) {
  set_has_errno();
  errno_ = value;
}

// required string username = 2;
inline bool msg_response_enter_game::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_response_enter_game::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_response_enter_game::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_response_enter_game::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& msg_response_enter_game::username() const {
  return *username_;
}
inline void msg_response_enter_game::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void msg_response_enter_game::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void msg_response_enter_game::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_response_enter_game::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* msg_response_enter_game::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_response_enter_game::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::e_login_msgid>() {
  return ::e_login_msgid_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_login_2eproto__INCLUDED

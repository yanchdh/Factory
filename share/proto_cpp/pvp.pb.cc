// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pvp.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pvp.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* msg_request_start_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_request_start_reflection_ = NULL;
const ::google::protobuf::Descriptor* pvp_player_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pvp_player_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_response_start_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_response_start_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_response_start_call_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_response_start_call_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_request_call_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_request_call_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_response_call_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_response_call_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_response_start_discard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_response_start_discard_reflection_ = NULL;
const ::google::protobuf::Descriptor* card_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  card_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_request_discard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_request_discard_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_response_discard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_response_discard_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* e_pvp_msgid_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_pvp_2eproto() {
  protobuf_AddDesc_pvp_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pvp.proto");
  GOOGLE_CHECK(file != NULL);
  msg_request_start_descriptor_ = file->message_type(0);
  static const int msg_request_start_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_request_start, uid_),
  };
  msg_request_start_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_request_start_descriptor_,
      msg_request_start::default_instance_,
      msg_request_start_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_request_start, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_request_start, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_request_start));
  pvp_player_info_descriptor_ = file->message_type(1);
  static const int pvp_player_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pvp_player_info, uid_),
  };
  pvp_player_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pvp_player_info_descriptor_,
      pvp_player_info::default_instance_,
      pvp_player_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pvp_player_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pvp_player_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pvp_player_info));
  msg_response_start_descriptor_ = file->message_type(2);
  static const int msg_response_start_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_response_start, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_response_start, players_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_response_start, dz_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_response_start, stance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_response_start, cards_),
  };
  msg_response_start_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_response_start_descriptor_,
      msg_response_start::default_instance_,
      msg_response_start_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_response_start, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_response_start, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_response_start));
  msg_response_start_call_descriptor_ = file->message_type(3);
  static const int msg_response_start_call_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_response_start_call, stance_),
  };
  msg_response_start_call_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_response_start_call_descriptor_,
      msg_response_start_call::default_instance_,
      msg_response_start_call_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_response_start_call, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_response_start_call, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_response_start_call));
  msg_request_call_descriptor_ = file->message_type(4);
  static const int msg_request_call_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_request_call, stance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_request_call, score_),
  };
  msg_request_call_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_request_call_descriptor_,
      msg_request_call::default_instance_,
      msg_request_call_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_request_call, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_request_call, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_request_call));
  msg_response_call_descriptor_ = file->message_type(5);
  static const int msg_response_call_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_response_call, stance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_response_call, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_response_call, call_cards_),
  };
  msg_response_call_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_response_call_descriptor_,
      msg_response_call::default_instance_,
      msg_response_call_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_response_call, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_response_call, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_response_call));
  msg_response_start_discard_descriptor_ = file->message_type(6);
  static const int msg_response_start_discard_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_response_start_discard, stance_),
  };
  msg_response_start_discard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_response_start_discard_descriptor_,
      msg_response_start_discard::default_instance_,
      msg_response_start_discard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_response_start_discard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_response_start_discard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_response_start_discard));
  card_info_descriptor_ = file->message_type(7);
  static const int card_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(card_info, card_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(card_info, cards1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(card_info, cards2_),
  };
  card_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      card_info_descriptor_,
      card_info::default_instance_,
      card_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(card_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(card_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(card_info));
  msg_request_discard_descriptor_ = file->message_type(8);
  static const int msg_request_discard_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_request_discard, stance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_request_discard, cardinfo_),
  };
  msg_request_discard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_request_discard_descriptor_,
      msg_request_discard::default_instance_,
      msg_request_discard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_request_discard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_request_discard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_request_discard));
  msg_response_discard_descriptor_ = file->message_type(9);
  static const int msg_response_discard_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_response_discard, stance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_response_discard, err_),
  };
  msg_response_discard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_response_discard_descriptor_,
      msg_response_discard::default_instance_,
      msg_response_discard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_response_discard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_response_discard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_response_discard));
  e_pvp_msgid_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pvp_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_request_start_descriptor_, &msg_request_start::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pvp_player_info_descriptor_, &pvp_player_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_response_start_descriptor_, &msg_response_start::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_response_start_call_descriptor_, &msg_response_start_call::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_request_call_descriptor_, &msg_request_call::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_response_call_descriptor_, &msg_response_call::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_response_start_discard_descriptor_, &msg_response_start_discard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    card_info_descriptor_, &card_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_request_discard_descriptor_, &msg_request_discard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_response_discard_descriptor_, &msg_response_discard::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pvp_2eproto() {
  delete msg_request_start::default_instance_;
  delete msg_request_start_reflection_;
  delete pvp_player_info::default_instance_;
  delete pvp_player_info_reflection_;
  delete msg_response_start::default_instance_;
  delete msg_response_start_reflection_;
  delete msg_response_start_call::default_instance_;
  delete msg_response_start_call_reflection_;
  delete msg_request_call::default_instance_;
  delete msg_request_call_reflection_;
  delete msg_response_call::default_instance_;
  delete msg_response_call_reflection_;
  delete msg_response_start_discard::default_instance_;
  delete msg_response_start_discard_reflection_;
  delete card_info::default_instance_;
  delete card_info_reflection_;
  delete msg_request_discard::default_instance_;
  delete msg_request_discard_reflection_;
  delete msg_response_discard::default_instance_;
  delete msg_response_discard_reflection_;
}

void protobuf_AddDesc_pvp_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_classicddz_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tpvp.proto\032\020classicddz.proto\" \n\021msg_req"
    "uest_start\022\013\n\003uid\030\001 \002(\003\"\036\n\017pvp_player_in"
    "fo\022\013\n\003uid\030\001 \002(\003\"|\n\022msg_response_start\022\016\n"
    "\006roomid\030\001 \002(\003\022&\n\014players_info\030\002 \003(\0132\020.pv"
    "p_player_info\022\017\n\007dz_info\030\003 \002(\005\022\016\n\006stance"
    "\030\004 \002(\005\022\r\n\005cards\030\005 \002(\014\")\n\027msg_response_st"
    "art_call\022\016\n\006stance\030\001 \002(\005\"1\n\020msg_request_"
    "call\022\016\n\006stance\030\001 \002(\005\022\r\n\005score\030\002 \002(\005\"F\n\021m"
    "sg_response_call\022\016\n\006stance\030\001 \002(\005\022\r\n\005scor"
    "e\030\002 \002(\005\022\022\n\ncall_cards\030\003 \002(\014\",\n\032msg_respo"
    "nse_start_discard\022\016\n\006stance\030\001 \002(\005\"L\n\tcar"
    "d_info\022\037\n\tcard_type\030\001 \002(\0162\014.e_card_type\022"
    "\016\n\006cards1\030\002 \002(\014\022\016\n\006cards2\030\003 \002(\014\"C\n\023msg_r"
    "equest_discard\022\016\n\006stance\030\001 \002(\005\022\034\n\010cardin"
    "fo\030\002 \001(\0132\n.card_info\"3\n\024msg_response_dis"
    "card\022\016\n\006stance\030\001 \002(\005\022\013\n\003err\030\002 \002(\005*\311\001\n\013e_"
    "pvp_msgid\022\023\n\rrequest_start\020\241\234\001\022\024\n\016respon"
    "se_start\020\242\234\001\022\031\n\023response_start_call\020\253\234\001\022"
    "\022\n\014request_call\020\254\234\001\022\023\n\rresponse_call\020\255\234\001"
    "\022\034\n\026response_start_discard\020\265\234\001\022\025\n\017reques"
    "t_discard\020\266\234\001\022\026\n\020response_discard\020\267\234\001", 837);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pvp.proto", &protobuf_RegisterTypes);
  msg_request_start::default_instance_ = new msg_request_start();
  pvp_player_info::default_instance_ = new pvp_player_info();
  msg_response_start::default_instance_ = new msg_response_start();
  msg_response_start_call::default_instance_ = new msg_response_start_call();
  msg_request_call::default_instance_ = new msg_request_call();
  msg_response_call::default_instance_ = new msg_response_call();
  msg_response_start_discard::default_instance_ = new msg_response_start_discard();
  card_info::default_instance_ = new card_info();
  msg_request_discard::default_instance_ = new msg_request_discard();
  msg_response_discard::default_instance_ = new msg_response_discard();
  msg_request_start::default_instance_->InitAsDefaultInstance();
  pvp_player_info::default_instance_->InitAsDefaultInstance();
  msg_response_start::default_instance_->InitAsDefaultInstance();
  msg_response_start_call::default_instance_->InitAsDefaultInstance();
  msg_request_call::default_instance_->InitAsDefaultInstance();
  msg_response_call::default_instance_->InitAsDefaultInstance();
  msg_response_start_discard::default_instance_->InitAsDefaultInstance();
  card_info::default_instance_->InitAsDefaultInstance();
  msg_request_discard::default_instance_->InitAsDefaultInstance();
  msg_response_discard::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pvp_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pvp_2eproto {
  StaticDescriptorInitializer_pvp_2eproto() {
    protobuf_AddDesc_pvp_2eproto();
  }
} static_descriptor_initializer_pvp_2eproto_;
const ::google::protobuf::EnumDescriptor* e_pvp_msgid_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return e_pvp_msgid_descriptor_;
}
bool e_pvp_msgid_IsValid(int value) {
  switch(value) {
    case 20001:
    case 20002:
    case 20011:
    case 20012:
    case 20013:
    case 20021:
    case 20022:
    case 20023:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int msg_request_start::kUidFieldNumber;
#endif  // !_MSC_VER

msg_request_start::msg_request_start()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_request_start::InitAsDefaultInstance() {
}

msg_request_start::msg_request_start(const msg_request_start& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_request_start::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_request_start::~msg_request_start() {
  SharedDtor();
}

void msg_request_start::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_request_start::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_request_start::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_request_start_descriptor_;
}

const msg_request_start& msg_request_start::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pvp_2eproto();
  return *default_instance_;
}

msg_request_start* msg_request_start::default_instance_ = NULL;

msg_request_start* msg_request_start::New() const {
  return new msg_request_start;
}

void msg_request_start::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_request_start::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_request_start::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_request_start::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_request_start::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_request_start::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_request_start* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_request_start*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_request_start::MergeFrom(const msg_request_start& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_request_start::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_request_start::CopyFrom(const msg_request_start& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_request_start::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void msg_request_start::Swap(msg_request_start* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_request_start::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_request_start_descriptor_;
  metadata.reflection = msg_request_start_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pvp_player_info::kUidFieldNumber;
#endif  // !_MSC_VER

pvp_player_info::pvp_player_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pvp_player_info::InitAsDefaultInstance() {
}

pvp_player_info::pvp_player_info(const pvp_player_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pvp_player_info::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pvp_player_info::~pvp_player_info() {
  SharedDtor();
}

void pvp_player_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pvp_player_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pvp_player_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pvp_player_info_descriptor_;
}

const pvp_player_info& pvp_player_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pvp_2eproto();
  return *default_instance_;
}

pvp_player_info* pvp_player_info::default_instance_ = NULL;

pvp_player_info* pvp_player_info::New() const {
  return new pvp_player_info;
}

void pvp_player_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pvp_player_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pvp_player_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pvp_player_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pvp_player_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pvp_player_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pvp_player_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pvp_player_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pvp_player_info::MergeFrom(const pvp_player_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pvp_player_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pvp_player_info::CopyFrom(const pvp_player_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pvp_player_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void pvp_player_info::Swap(pvp_player_info* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pvp_player_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pvp_player_info_descriptor_;
  metadata.reflection = pvp_player_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_response_start::kRoomidFieldNumber;
const int msg_response_start::kPlayersInfoFieldNumber;
const int msg_response_start::kDzInfoFieldNumber;
const int msg_response_start::kStanceFieldNumber;
const int msg_response_start::kCardsFieldNumber;
#endif  // !_MSC_VER

msg_response_start::msg_response_start()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_response_start::InitAsDefaultInstance() {
}

msg_response_start::msg_response_start(const msg_response_start& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_response_start::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = GOOGLE_LONGLONG(0);
  dz_info_ = 0;
  stance_ = 0;
  cards_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_response_start::~msg_response_start() {
  SharedDtor();
}

void msg_response_start::SharedDtor() {
  if (cards_ != &::google::protobuf::internal::kEmptyString) {
    delete cards_;
  }
  if (this != default_instance_) {
  }
}

void msg_response_start::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_response_start::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_response_start_descriptor_;
}

const msg_response_start& msg_response_start::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pvp_2eproto();
  return *default_instance_;
}

msg_response_start* msg_response_start::default_instance_ = NULL;

msg_response_start* msg_response_start::New() const {
  return new msg_response_start;
}

void msg_response_start::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = GOOGLE_LONGLONG(0);
    dz_info_ = 0;
    stance_ = 0;
    if (has_cards()) {
      if (cards_ != &::google::protobuf::internal::kEmptyString) {
        cards_->clear();
      }
    }
  }
  players_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_response_start::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 roomid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_players_info;
        break;
      }

      // repeated .pvp_player_info players_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_players_info;
        if (input->ExpectTag(24)) goto parse_dz_info;
        break;
      }

      // required int32 dz_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dz_info:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dz_info_)));
          set_has_dz_info();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_stance;
        break;
      }

      // required int32 stance = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stance_)));
          set_has_stance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_cards;
        break;
      }

      // required bytes cards = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_response_start::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 roomid = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->roomid(), output);
  }

  // repeated .pvp_player_info players_info = 2;
  for (int i = 0; i < this->players_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->players_info(i), output);
  }

  // required int32 dz_info = 3;
  if (has_dz_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dz_info(), output);
  }

  // required int32 stance = 4;
  if (has_stance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->stance(), output);
  }

  // required bytes cards = 5;
  if (has_cards()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->cards(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_response_start::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 roomid = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->roomid(), target);
  }

  // repeated .pvp_player_info players_info = 2;
  for (int i = 0; i < this->players_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->players_info(i), target);
  }

  // required int32 dz_info = 3;
  if (has_dz_info()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dz_info(), target);
  }

  // required int32 stance = 4;
  if (has_stance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->stance(), target);
  }

  // required bytes cards = 5;
  if (has_cards()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->cards(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_response_start::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 roomid = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roomid());
    }

    // required int32 dz_info = 3;
    if (has_dz_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dz_info());
    }

    // required int32 stance = 4;
    if (has_stance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stance());
    }

    // required bytes cards = 5;
    if (has_cards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cards());
    }

  }
  // repeated .pvp_player_info players_info = 2;
  total_size += 1 * this->players_info_size();
  for (int i = 0; i < this->players_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_response_start::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_response_start* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_response_start*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_response_start::MergeFrom(const msg_response_start& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_info_.MergeFrom(from.players_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_dz_info()) {
      set_dz_info(from.dz_info());
    }
    if (from.has_stance()) {
      set_stance(from.stance());
    }
    if (from.has_cards()) {
      set_cards(from.cards());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_response_start::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_response_start::CopyFrom(const msg_response_start& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_response_start::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001d) != 0x0000001d) return false;

  for (int i = 0; i < players_info_size(); i++) {
    if (!this->players_info(i).IsInitialized()) return false;
  }
  return true;
}

void msg_response_start::Swap(msg_response_start* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    players_info_.Swap(&other->players_info_);
    std::swap(dz_info_, other->dz_info_);
    std::swap(stance_, other->stance_);
    std::swap(cards_, other->cards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_response_start::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_response_start_descriptor_;
  metadata.reflection = msg_response_start_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_response_start_call::kStanceFieldNumber;
#endif  // !_MSC_VER

msg_response_start_call::msg_response_start_call()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_response_start_call::InitAsDefaultInstance() {
}

msg_response_start_call::msg_response_start_call(const msg_response_start_call& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_response_start_call::SharedCtor() {
  _cached_size_ = 0;
  stance_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_response_start_call::~msg_response_start_call() {
  SharedDtor();
}

void msg_response_start_call::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_response_start_call::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_response_start_call::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_response_start_call_descriptor_;
}

const msg_response_start_call& msg_response_start_call::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pvp_2eproto();
  return *default_instance_;
}

msg_response_start_call* msg_response_start_call::default_instance_ = NULL;

msg_response_start_call* msg_response_start_call::New() const {
  return new msg_response_start_call;
}

void msg_response_start_call::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stance_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_response_start_call::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 stance = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stance_)));
          set_has_stance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_response_start_call::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 stance = 1;
  if (has_stance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->stance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_response_start_call::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 stance = 1;
  if (has_stance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->stance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_response_start_call::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 stance = 1;
    if (has_stance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stance());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_response_start_call::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_response_start_call* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_response_start_call*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_response_start_call::MergeFrom(const msg_response_start_call& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stance()) {
      set_stance(from.stance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_response_start_call::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_response_start_call::CopyFrom(const msg_response_start_call& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_response_start_call::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void msg_response_start_call::Swap(msg_response_start_call* other) {
  if (other != this) {
    std::swap(stance_, other->stance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_response_start_call::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_response_start_call_descriptor_;
  metadata.reflection = msg_response_start_call_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_request_call::kStanceFieldNumber;
const int msg_request_call::kScoreFieldNumber;
#endif  // !_MSC_VER

msg_request_call::msg_request_call()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_request_call::InitAsDefaultInstance() {
}

msg_request_call::msg_request_call(const msg_request_call& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_request_call::SharedCtor() {
  _cached_size_ = 0;
  stance_ = 0;
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_request_call::~msg_request_call() {
  SharedDtor();
}

void msg_request_call::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_request_call::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_request_call::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_request_call_descriptor_;
}

const msg_request_call& msg_request_call::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pvp_2eproto();
  return *default_instance_;
}

msg_request_call* msg_request_call::default_instance_ = NULL;

msg_request_call* msg_request_call::New() const {
  return new msg_request_call;
}

void msg_request_call::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stance_ = 0;
    score_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_request_call::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 stance = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stance_)));
          set_has_stance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // required int32 score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_request_call::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 stance = 1;
  if (has_stance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->stance(), output);
  }

  // required int32 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_request_call::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 stance = 1;
  if (has_stance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->stance(), target);
  }

  // required int32 score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_request_call::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 stance = 1;
    if (has_stance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stance());
    }

    // required int32 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_request_call::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_request_call* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_request_call*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_request_call::MergeFrom(const msg_request_call& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stance()) {
      set_stance(from.stance());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_request_call::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_request_call::CopyFrom(const msg_request_call& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_request_call::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void msg_request_call::Swap(msg_request_call* other) {
  if (other != this) {
    std::swap(stance_, other->stance_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_request_call::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_request_call_descriptor_;
  metadata.reflection = msg_request_call_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_response_call::kStanceFieldNumber;
const int msg_response_call::kScoreFieldNumber;
const int msg_response_call::kCallCardsFieldNumber;
#endif  // !_MSC_VER

msg_response_call::msg_response_call()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_response_call::InitAsDefaultInstance() {
}

msg_response_call::msg_response_call(const msg_response_call& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_response_call::SharedCtor() {
  _cached_size_ = 0;
  stance_ = 0;
  score_ = 0;
  call_cards_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_response_call::~msg_response_call() {
  SharedDtor();
}

void msg_response_call::SharedDtor() {
  if (call_cards_ != &::google::protobuf::internal::kEmptyString) {
    delete call_cards_;
  }
  if (this != default_instance_) {
  }
}

void msg_response_call::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_response_call::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_response_call_descriptor_;
}

const msg_response_call& msg_response_call::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pvp_2eproto();
  return *default_instance_;
}

msg_response_call* msg_response_call::default_instance_ = NULL;

msg_response_call* msg_response_call::New() const {
  return new msg_response_call;
}

void msg_response_call::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stance_ = 0;
    score_ = 0;
    if (has_call_cards()) {
      if (call_cards_ != &::google::protobuf::internal::kEmptyString) {
        call_cards_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_response_call::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 stance = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stance_)));
          set_has_stance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // required int32 score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_call_cards;
        break;
      }

      // required bytes call_cards = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_call_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_call_cards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_response_call::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 stance = 1;
  if (has_stance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->stance(), output);
  }

  // required int32 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->score(), output);
  }

  // required bytes call_cards = 3;
  if (has_call_cards()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->call_cards(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_response_call::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 stance = 1;
  if (has_stance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->stance(), target);
  }

  // required int32 score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->score(), target);
  }

  // required bytes call_cards = 3;
  if (has_call_cards()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->call_cards(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_response_call::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 stance = 1;
    if (has_stance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stance());
    }

    // required int32 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // required bytes call_cards = 3;
    if (has_call_cards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->call_cards());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_response_call::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_response_call* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_response_call*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_response_call::MergeFrom(const msg_response_call& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stance()) {
      set_stance(from.stance());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_call_cards()) {
      set_call_cards(from.call_cards());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_response_call::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_response_call::CopyFrom(const msg_response_call& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_response_call::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void msg_response_call::Swap(msg_response_call* other) {
  if (other != this) {
    std::swap(stance_, other->stance_);
    std::swap(score_, other->score_);
    std::swap(call_cards_, other->call_cards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_response_call::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_response_call_descriptor_;
  metadata.reflection = msg_response_call_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_response_start_discard::kStanceFieldNumber;
#endif  // !_MSC_VER

msg_response_start_discard::msg_response_start_discard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_response_start_discard::InitAsDefaultInstance() {
}

msg_response_start_discard::msg_response_start_discard(const msg_response_start_discard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_response_start_discard::SharedCtor() {
  _cached_size_ = 0;
  stance_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_response_start_discard::~msg_response_start_discard() {
  SharedDtor();
}

void msg_response_start_discard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_response_start_discard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_response_start_discard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_response_start_discard_descriptor_;
}

const msg_response_start_discard& msg_response_start_discard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pvp_2eproto();
  return *default_instance_;
}

msg_response_start_discard* msg_response_start_discard::default_instance_ = NULL;

msg_response_start_discard* msg_response_start_discard::New() const {
  return new msg_response_start_discard;
}

void msg_response_start_discard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stance_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_response_start_discard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 stance = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stance_)));
          set_has_stance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_response_start_discard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 stance = 1;
  if (has_stance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->stance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_response_start_discard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 stance = 1;
  if (has_stance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->stance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_response_start_discard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 stance = 1;
    if (has_stance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stance());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_response_start_discard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_response_start_discard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_response_start_discard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_response_start_discard::MergeFrom(const msg_response_start_discard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stance()) {
      set_stance(from.stance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_response_start_discard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_response_start_discard::CopyFrom(const msg_response_start_discard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_response_start_discard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void msg_response_start_discard::Swap(msg_response_start_discard* other) {
  if (other != this) {
    std::swap(stance_, other->stance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_response_start_discard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_response_start_discard_descriptor_;
  metadata.reflection = msg_response_start_discard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int card_info::kCardTypeFieldNumber;
const int card_info::kCards1FieldNumber;
const int card_info::kCards2FieldNumber;
#endif  // !_MSC_VER

card_info::card_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void card_info::InitAsDefaultInstance() {
}

card_info::card_info(const card_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void card_info::SharedCtor() {
  _cached_size_ = 0;
  card_type_ = 0;
  cards1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cards2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

card_info::~card_info() {
  SharedDtor();
}

void card_info::SharedDtor() {
  if (cards1_ != &::google::protobuf::internal::kEmptyString) {
    delete cards1_;
  }
  if (cards2_ != &::google::protobuf::internal::kEmptyString) {
    delete cards2_;
  }
  if (this != default_instance_) {
  }
}

void card_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* card_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return card_info_descriptor_;
}

const card_info& card_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pvp_2eproto();
  return *default_instance_;
}

card_info* card_info::default_instance_ = NULL;

card_info* card_info::New() const {
  return new card_info;
}

void card_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    card_type_ = 0;
    if (has_cards1()) {
      if (cards1_ != &::google::protobuf::internal::kEmptyString) {
        cards1_->clear();
      }
    }
    if (has_cards2()) {
      if (cards2_ != &::google::protobuf::internal::kEmptyString) {
        cards2_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool card_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .e_card_type card_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::e_card_type_IsValid(value)) {
            set_card_type(static_cast< ::e_card_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cards1;
        break;
      }

      // required bytes cards1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cards1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cards1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cards2;
        break;
      }

      // required bytes cards2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cards2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cards2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void card_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .e_card_type card_type = 1;
  if (has_card_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->card_type(), output);
  }

  // required bytes cards1 = 2;
  if (has_cards1()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->cards1(), output);
  }

  // required bytes cards2 = 3;
  if (has_cards2()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->cards2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* card_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .e_card_type card_type = 1;
  if (has_card_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->card_type(), target);
  }

  // required bytes cards1 = 2;
  if (has_cards1()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->cards1(), target);
  }

  // required bytes cards2 = 3;
  if (has_cards2()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->cards2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int card_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .e_card_type card_type = 1;
    if (has_card_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->card_type());
    }

    // required bytes cards1 = 2;
    if (has_cards1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cards1());
    }

    // required bytes cards2 = 3;
    if (has_cards2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cards2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void card_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const card_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const card_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void card_info::MergeFrom(const card_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_card_type()) {
      set_card_type(from.card_type());
    }
    if (from.has_cards1()) {
      set_cards1(from.cards1());
    }
    if (from.has_cards2()) {
      set_cards2(from.cards2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void card_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void card_info::CopyFrom(const card_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool card_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void card_info::Swap(card_info* other) {
  if (other != this) {
    std::swap(card_type_, other->card_type_);
    std::swap(cards1_, other->cards1_);
    std::swap(cards2_, other->cards2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata card_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = card_info_descriptor_;
  metadata.reflection = card_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_request_discard::kStanceFieldNumber;
const int msg_request_discard::kCardinfoFieldNumber;
#endif  // !_MSC_VER

msg_request_discard::msg_request_discard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_request_discard::InitAsDefaultInstance() {
  cardinfo_ = const_cast< ::card_info*>(&::card_info::default_instance());
}

msg_request_discard::msg_request_discard(const msg_request_discard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_request_discard::SharedCtor() {
  _cached_size_ = 0;
  stance_ = 0;
  cardinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_request_discard::~msg_request_discard() {
  SharedDtor();
}

void msg_request_discard::SharedDtor() {
  if (this != default_instance_) {
    delete cardinfo_;
  }
}

void msg_request_discard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_request_discard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_request_discard_descriptor_;
}

const msg_request_discard& msg_request_discard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pvp_2eproto();
  return *default_instance_;
}

msg_request_discard* msg_request_discard::default_instance_ = NULL;

msg_request_discard* msg_request_discard::New() const {
  return new msg_request_discard;
}

void msg_request_discard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stance_ = 0;
    if (has_cardinfo()) {
      if (cardinfo_ != NULL) cardinfo_->::card_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_request_discard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 stance = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stance_)));
          set_has_stance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cardinfo;
        break;
      }

      // optional .card_info cardinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cardinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cardinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_request_discard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 stance = 1;
  if (has_stance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->stance(), output);
  }

  // optional .card_info cardinfo = 2;
  if (has_cardinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cardinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_request_discard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 stance = 1;
  if (has_stance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->stance(), target);
  }

  // optional .card_info cardinfo = 2;
  if (has_cardinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cardinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_request_discard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 stance = 1;
    if (has_stance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stance());
    }

    // optional .card_info cardinfo = 2;
    if (has_cardinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cardinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_request_discard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_request_discard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_request_discard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_request_discard::MergeFrom(const msg_request_discard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stance()) {
      set_stance(from.stance());
    }
    if (from.has_cardinfo()) {
      mutable_cardinfo()->::card_info::MergeFrom(from.cardinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_request_discard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_request_discard::CopyFrom(const msg_request_discard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_request_discard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_cardinfo()) {
    if (!this->cardinfo().IsInitialized()) return false;
  }
  return true;
}

void msg_request_discard::Swap(msg_request_discard* other) {
  if (other != this) {
    std::swap(stance_, other->stance_);
    std::swap(cardinfo_, other->cardinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_request_discard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_request_discard_descriptor_;
  metadata.reflection = msg_request_discard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_response_discard::kStanceFieldNumber;
const int msg_response_discard::kErrFieldNumber;
#endif  // !_MSC_VER

msg_response_discard::msg_response_discard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_response_discard::InitAsDefaultInstance() {
}

msg_response_discard::msg_response_discard(const msg_response_discard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_response_discard::SharedCtor() {
  _cached_size_ = 0;
  stance_ = 0;
  err_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_response_discard::~msg_response_discard() {
  SharedDtor();
}

void msg_response_discard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_response_discard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_response_discard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_response_discard_descriptor_;
}

const msg_response_discard& msg_response_discard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pvp_2eproto();
  return *default_instance_;
}

msg_response_discard* msg_response_discard::default_instance_ = NULL;

msg_response_discard* msg_response_discard::New() const {
  return new msg_response_discard;
}

void msg_response_discard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stance_ = 0;
    err_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_response_discard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 stance = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stance_)));
          set_has_stance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_err;
        break;
      }

      // required int32 err = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_err:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_)));
          set_has_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_response_discard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 stance = 1;
  if (has_stance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->stance(), output);
  }

  // required int32 err = 2;
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->err(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_response_discard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 stance = 1;
  if (has_stance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->stance(), target);
  }

  // required int32 err = 2;
  if (has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->err(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_response_discard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 stance = 1;
    if (has_stance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stance());
    }

    // required int32 err = 2;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_response_discard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_response_discard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_response_discard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_response_discard::MergeFrom(const msg_response_discard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stance()) {
      set_stance(from.stance());
    }
    if (from.has_err()) {
      set_err(from.err());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_response_discard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_response_discard::CopyFrom(const msg_response_discard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_response_discard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void msg_response_discard::Swap(msg_response_discard* other) {
  if (other != this) {
    std::swap(stance_, other->stance_);
    std::swap(err_, other->err_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_response_discard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_response_discard_descriptor_;
  metadata.reflection = msg_response_discard_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

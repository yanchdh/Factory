// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: classicddz.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "classicddz.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* classicddz_cards_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  classicddz_cards_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* e_card_type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_classicddz_2eproto() {
  protobuf_AddDesc_classicddz_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "classicddz.proto");
  GOOGLE_CHECK(file != NULL);
  classicddz_cards_descriptor_ = file->message_type(0);
  static const int classicddz_cards_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(classicddz_cards, e_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(classicddz_cards, cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(classicddz_cards, desc_),
  };
  classicddz_cards_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      classicddz_cards_descriptor_,
      classicddz_cards::default_instance_,
      classicddz_cards_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(classicddz_cards, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(classicddz_cards, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(classicddz_cards));
  e_card_type_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_classicddz_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    classicddz_cards_descriptor_, &classicddz_cards::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_classicddz_2eproto() {
  delete classicddz_cards::default_instance_;
  delete classicddz_cards_reflection_;
}

void protobuf_AddDesc_classicddz_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020classicddz.proto\"M\n\020classicddz_cards\022\034"
    "\n\006e_type\030\001 \002(\0162\014.e_card_type\022\r\n\005cards\030\002 "
    "\002(\014\022\014\n\004desc\030\003 \002(\014*\271\001\n\013e_card_type\022\014\n\010e_c"
    "ard_0\020\000\022\016\n\010e_card_1\020\205\202\004\022\016\n\010e_card_2\020\203\202\010\022"
    "\016\n\010e_card_3\020\202\202\014\022\020\n\ne_card_3_1\020\222\242\014\022\020\n\ne_c"
    "ard_3_2\020\222\302\014\022\016\n\010e_card_4\020\200\202\020\022\020\n\ne_card_4_"
    "1\020\220\242\020\022\022\n\014e_card_4_2_1\020\240\242\020\022\022\n\014e_card_4_2_"
    "2\020\240\302\020", 285);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "classicddz.proto", &protobuf_RegisterTypes);
  classicddz_cards::default_instance_ = new classicddz_cards();
  classicddz_cards::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_classicddz_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_classicddz_2eproto {
  StaticDescriptorInitializer_classicddz_2eproto() {
    protobuf_AddDesc_classicddz_2eproto();
  }
} static_descriptor_initializer_classicddz_2eproto_;
const ::google::protobuf::EnumDescriptor* e_card_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return e_card_type_descriptor_;
}
bool e_card_type_IsValid(int value) {
  switch(value) {
    case 0:
    case 65797:
    case 131331:
    case 196866:
    case 200978:
    case 205074:
    case 262400:
    case 266512:
    case 266528:
    case 270624:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int classicddz_cards::kETypeFieldNumber;
const int classicddz_cards::kCardsFieldNumber;
const int classicddz_cards::kDescFieldNumber;
#endif  // !_MSC_VER

classicddz_cards::classicddz_cards()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void classicddz_cards::InitAsDefaultInstance() {
}

classicddz_cards::classicddz_cards(const classicddz_cards& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void classicddz_cards::SharedCtor() {
  _cached_size_ = 0;
  e_type_ = 0;
  cards_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

classicddz_cards::~classicddz_cards() {
  SharedDtor();
}

void classicddz_cards::SharedDtor() {
  if (cards_ != &::google::protobuf::internal::kEmptyString) {
    delete cards_;
  }
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (this != default_instance_) {
  }
}

void classicddz_cards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* classicddz_cards::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return classicddz_cards_descriptor_;
}

const classicddz_cards& classicddz_cards::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_classicddz_2eproto();
  return *default_instance_;
}

classicddz_cards* classicddz_cards::default_instance_ = NULL;

classicddz_cards* classicddz_cards::New() const {
  return new classicddz_cards;
}

void classicddz_cards::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    e_type_ = 0;
    if (has_cards()) {
      if (cards_ != &::google::protobuf::internal::kEmptyString) {
        cards_->clear();
      }
    }
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool classicddz_cards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .e_card_type e_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::e_card_type_IsValid(value)) {
            set_e_type(static_cast< ::e_card_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cards;
        break;
      }

      // required bytes cards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_desc;
        break;
      }

      // required bytes desc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_desc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void classicddz_cards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .e_card_type e_type = 1;
  if (has_e_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->e_type(), output);
  }

  // required bytes cards = 2;
  if (has_cards()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->cards(), output);
  }

  // required bytes desc = 3;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->desc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* classicddz_cards::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .e_card_type e_type = 1;
  if (has_e_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->e_type(), target);
  }

  // required bytes cards = 2;
  if (has_cards()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->cards(), target);
  }

  // required bytes desc = 3;
  if (has_desc()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->desc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int classicddz_cards::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .e_card_type e_type = 1;
    if (has_e_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->e_type());
    }

    // required bytes cards = 2;
    if (has_cards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cards());
    }

    // required bytes desc = 3;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->desc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void classicddz_cards::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const classicddz_cards* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const classicddz_cards*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void classicddz_cards::MergeFrom(const classicddz_cards& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_e_type()) {
      set_e_type(from.e_type());
    }
    if (from.has_cards()) {
      set_cards(from.cards());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void classicddz_cards::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void classicddz_cards::CopyFrom(const classicddz_cards& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool classicddz_cards::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void classicddz_cards::Swap(classicddz_cards* other) {
  if (other != this) {
    std::swap(e_type_, other->e_type_);
    std::swap(cards_, other->cards_);
    std::swap(desc_, other->desc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata classicddz_cards::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = classicddz_cards_descriptor_;
  metadata.reflection = classicddz_cards_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

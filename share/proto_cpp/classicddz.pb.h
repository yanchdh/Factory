// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: classicddz.proto

#ifndef PROTOBUF_classicddz_2eproto__INCLUDED
#define PROTOBUF_classicddz_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_classicddz_2eproto();
void protobuf_AssignDesc_classicddz_2eproto();
void protobuf_ShutdownFile_classicddz_2eproto();

class classicddz_cards;

enum e_card_type {
  e_card_0 = 0,
  e_card_1 = 65797,
  e_card_2 = 131331,
  e_card_3 = 196866,
  e_card_3_1 = 200978,
  e_card_3_2 = 205074,
  e_card_4 = 262400,
  e_card_4_1 = 266512,
  e_card_4_2_1 = 266528,
  e_card_4_2_2 = 270624
};
bool e_card_type_IsValid(int value);
const e_card_type e_card_type_MIN = e_card_0;
const e_card_type e_card_type_MAX = e_card_4_2_2;
const int e_card_type_ARRAYSIZE = e_card_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* e_card_type_descriptor();
inline const ::std::string& e_card_type_Name(e_card_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    e_card_type_descriptor(), value);
}
inline bool e_card_type_Parse(
    const ::std::string& name, e_card_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<e_card_type>(
    e_card_type_descriptor(), name, value);
}
// ===================================================================

class classicddz_cards : public ::google::protobuf::Message {
 public:
  classicddz_cards();
  virtual ~classicddz_cards();

  classicddz_cards(const classicddz_cards& from);

  inline classicddz_cards& operator=(const classicddz_cards& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const classicddz_cards& default_instance();

  void Swap(classicddz_cards* other);

  // implements Message ----------------------------------------------

  classicddz_cards* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const classicddz_cards& from);
  void MergeFrom(const classicddz_cards& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .e_card_type e_type = 1;
  inline bool has_e_type() const;
  inline void clear_e_type();
  static const int kETypeFieldNumber = 1;
  inline ::e_card_type e_type() const;
  inline void set_e_type(::e_card_type value);

  // required bytes cards = 2;
  inline bool has_cards() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 2;
  inline const ::std::string& cards() const;
  inline void set_cards(const ::std::string& value);
  inline void set_cards(const char* value);
  inline void set_cards(const void* value, size_t size);
  inline ::std::string* mutable_cards();
  inline ::std::string* release_cards();
  inline void set_allocated_cards(::std::string* cards);

  // required bytes desc = 3;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 3;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const void* value, size_t size);
  inline ::std::string* mutable_desc();
  inline ::std::string* release_desc();
  inline void set_allocated_desc(::std::string* desc);

  // @@protoc_insertion_point(class_scope:classicddz_cards)
 private:
  inline void set_has_e_type();
  inline void clear_has_e_type();
  inline void set_has_cards();
  inline void clear_has_cards();
  inline void set_has_desc();
  inline void clear_has_desc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* cards_;
  ::std::string* desc_;
  int e_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_classicddz_2eproto();
  friend void protobuf_AssignDesc_classicddz_2eproto();
  friend void protobuf_ShutdownFile_classicddz_2eproto();

  void InitAsDefaultInstance();
  static classicddz_cards* default_instance_;
};
// ===================================================================


// ===================================================================

// classicddz_cards

// required .e_card_type e_type = 1;
inline bool classicddz_cards::has_e_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void classicddz_cards::set_has_e_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void classicddz_cards::clear_has_e_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void classicddz_cards::clear_e_type() {
  e_type_ = 0;
  clear_has_e_type();
}
inline ::e_card_type classicddz_cards::e_type() const {
  return static_cast< ::e_card_type >(e_type_);
}
inline void classicddz_cards::set_e_type(::e_card_type value) {
  assert(::e_card_type_IsValid(value));
  set_has_e_type();
  e_type_ = value;
}

// required bytes cards = 2;
inline bool classicddz_cards::has_cards() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void classicddz_cards::set_has_cards() {
  _has_bits_[0] |= 0x00000002u;
}
inline void classicddz_cards::clear_has_cards() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void classicddz_cards::clear_cards() {
  if (cards_ != &::google::protobuf::internal::kEmptyString) {
    cards_->clear();
  }
  clear_has_cards();
}
inline const ::std::string& classicddz_cards::cards() const {
  return *cards_;
}
inline void classicddz_cards::set_cards(const ::std::string& value) {
  set_has_cards();
  if (cards_ == &::google::protobuf::internal::kEmptyString) {
    cards_ = new ::std::string;
  }
  cards_->assign(value);
}
inline void classicddz_cards::set_cards(const char* value) {
  set_has_cards();
  if (cards_ == &::google::protobuf::internal::kEmptyString) {
    cards_ = new ::std::string;
  }
  cards_->assign(value);
}
inline void classicddz_cards::set_cards(const void* value, size_t size) {
  set_has_cards();
  if (cards_ == &::google::protobuf::internal::kEmptyString) {
    cards_ = new ::std::string;
  }
  cards_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* classicddz_cards::mutable_cards() {
  set_has_cards();
  if (cards_ == &::google::protobuf::internal::kEmptyString) {
    cards_ = new ::std::string;
  }
  return cards_;
}
inline ::std::string* classicddz_cards::release_cards() {
  clear_has_cards();
  if (cards_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cards_;
    cards_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void classicddz_cards::set_allocated_cards(::std::string* cards) {
  if (cards_ != &::google::protobuf::internal::kEmptyString) {
    delete cards_;
  }
  if (cards) {
    set_has_cards();
    cards_ = cards;
  } else {
    clear_has_cards();
    cards_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes desc = 3;
inline bool classicddz_cards::has_desc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void classicddz_cards::set_has_desc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void classicddz_cards::clear_has_desc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void classicddz_cards::clear_desc() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    desc_->clear();
  }
  clear_has_desc();
}
inline const ::std::string& classicddz_cards::desc() const {
  return *desc_;
}
inline void classicddz_cards::set_desc(const ::std::string& value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void classicddz_cards::set_desc(const char* value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void classicddz_cards::set_desc(const void* value, size_t size) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* classicddz_cards::mutable_desc() {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  return desc_;
}
inline ::std::string* classicddz_cards::release_desc() {
  clear_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = desc_;
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void classicddz_cards::set_allocated_desc(::std::string* desc) {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (desc) {
    set_has_desc();
    desc_ = desc;
  } else {
    clear_has_desc();
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::e_card_type>() {
  return ::e_card_type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_classicddz_2eproto__INCLUDED
